package net.jonathangiles.azure.shorturl.functions;

import com.microsoft.azure.serverless.functions.ExecutionContext;
import com.microsoft.azure.serverless.functions.HttpRequestMessage;
import com.microsoft.azure.serverless.functions.HttpResponseMessage;
import com.microsoft.azure.serverless.functions.annotation.AuthorizationLevel;
import com.microsoft.azure.serverless.functions.annotation.BindingName;
import com.microsoft.azure.serverless.functions.annotation.FunctionName;
import com.microsoft.azure.serverless.functions.annotation.HttpTrigger;
import net.jonathangiles.azure.shorturl.storage.DataStore;
import net.jonathangiles.azure.shorturl.storage.DataStoreFactory;
import net.jonathangiles.azure.shorturl.util.Util;

import java.util.Optional;

/**
 * This class provides the function responsible for converting a long url into a short url.
 */
public class ShortcodeFunction {

    private static final int MIN_KEY_LENGTH = 2;

    @FunctionName("shortcode")
    public HttpResponseMessage<String> shortcode(
            @HttpTrigger(name = "req", methods = {"post"}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,
            @BindingName("url") String url,
            final ExecutionContext context) {

        // if there is no tracking information, add the default tracking information here
        url = Util.addMicrosoftTracking(url, request);

        // we allow people to request their desired short code by setting a 'shortcode' query parameter
        String desiredShortcode = request.getQueryParameters().getOrDefault("shortcode", null);

        if (desiredShortcode == null) {
            // the user just wants an auto-generated shortcode
            return useGeneratedShortcode(request, url, context);
        } else {
            // lets try to use their shortcode. If it fails, we return a failure.
            return useProvidedShortcode(request, url, desiredShortcode, context);
        }
    }

    private HttpResponseMessage<String> useGeneratedShortcode(HttpRequestMessage<Optional<String>> request,
                                                              String url,
                                                              final ExecutionContext context) {
        context.getLogger().info("Attempting to create shortcode with url " + url + " and autogenerated shortcode");

        DataStore dataStore = DataStoreFactory.getInstance();

        String shortCode = "";
        int collisionCount = 0;
        int keyLength = MIN_KEY_LENGTH;
        while (shortCode == null || shortCode.isEmpty()) {
            shortCode = dataStore.saveShortCode(url, Util.generateKey(keyLength), true);

            // if we are here, the proposed shortcode failed, so we count that.
            // If we get too many collisions, increase the key length by one and
            // keep trying
            collisionCount++;
            if (collisionCount > 3) {
                keyLength++;
                collisionCount = 0;
            }
        }
        context.getLogger().info("Created short code: " + shortCode);

        return request.createResponse(200, createShortUrl(request, shortCode));
    }

    private HttpResponseMessage<String> useProvidedShortcode(HttpRequestMessage<Optional<String>> request,
                                                             String url,
                                                             String shortcode,
                                                             final ExecutionContext context) {
        context.getLogger().info("Attempting to create shortcode with url " + url + " and shortcode " + shortcode);

        DataStore dataStore = DataStoreFactory.getInstance();

        // we set checkForDupes to be false, so that we allow this short code to be used, even if the long URL is
        // recorded elsewhere
        String result = dataStore.saveShortCode(url, shortcode, false);
        if (result == null) {
            return request.createResponse(Util.HTTP_STATUS_CONFLICT, "Requested shortcode already in use");
        }

        return request.createResponse(200, createShortUrl(request, result));
    }

    private String createShortUrl(HttpRequestMessage<Optional<String>> request, String shortCode) {
        return "http://" + Util.getHost(request).getHost() + "/" + shortCode;
    }
}
